<xsl:stylesheet xmlns:xs="http://www.w3.org/2001/XMLSchema"
    exclude-result-prefixes="xs"
	version="2.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:saxon="http://saxon.sf.net/">
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" href="reportstyle.css"/>
                <!--<STYLE>
                    h2 {font-family: Arial,Univers,sans-serif;
                    font-size: 36pt }
                </STYLE>-->
                <h2>Report for Dr Zoidberg</h2>
              <div><xsl:value-of  select="current-date()"/></div>
                <div><xsl:apply-templates select="/report/date"></xsl:apply-templates></div>
            </head>
            <body>
                <h2>Table of Contents</h2>
                <ul><xsl:apply-templates select="//analysis" mode="toc"/></ul>
                
                <h2>Analysis</h2>
                <ul><xsl:apply-templates select="//analysis" mode="analysis"/></ul>   
                <!-- <xsl:apply-templates select="/report/analysis/method"/>-->
                
                <h2>Citations</h2>
                <ul><xsl:apply-templates select="//method" mode="cite"></xsl:apply-templates></ul>
                
            </body>
        </html>
    </xsl:template>
    <!-- LIST ANALYSIS (methods + figures)    -->
    <xsl:template match="analysis" mode="analysis">
           <li id="{@id}"> 
               <xsl:apply-templates select="@id"/>
                <ul>
                    <!-- list methods -->
                    <xsl:apply-templates select="/analysis/method"/>
                    <!-- this helps if an empyt list, ie no member methods -->
                    <xsl:apply-templates select="method"/>            
                    <!--  list figures  -->
                   <xsl:apply-templates select="/analysis/figure"/>
                    <xsl:apply-templates select="figure"/>
               </ul>
           </li>
    </xsl:template>
    <!--  INSERT TABLE  -->
    <xsl:template match="table">
      <!-- csv path variable  -->
      <!--  concat("http://localhost:1234",encode-for-uri("tmp.xsl")) -->
      <xsl:variable name="pathToCSV" select="encode-for-uri('/home/solver/CRIReportProject/toyexample/tmp.xsl')"/>
    <xsl:value-of select='$pathToCSV'/>
      <xsl:choose>
        <xsl:when test="unparsed-text-available($pathToCSV)">
            <xsl:text>HELLO?</xsl:text>
            <xsl:variable name="csvfile" select="unparsed-text($pathToCSV)"/>                    
            <!-- for-each line => table  -->        
            <table> 
                <xsl:for-each select="tokenize(unparsed-text($csvfile), '\r?\n')">
                    <!--<!-\- line count -\->
                    <xsl:variable name='linecount' select="count(.)"/>
                        VALS: <xsl:text/>
                        <xsl:value-of select='$linecount'/>
                    <!-\-<xsl:if test="$linecount eq 1">
                        <xsl:call-template name="header"/>
                    </xsl:if>-\->-->
                    <tr>
                    <!-- insert <td> -->
                    <xsl:call-template name="tokenize">                       
                        <xsl:with-param name="text" select="substring(.,2, string-length(.) -2)"/>
                    </xsl:call-template>
                    </tr>
                </xsl:for-each>
            </table>
        </xsl:when>
        <xsl:otherwise>
            <xsl:text>Cannot locate : </xsl:text>
<!--            <xsl:value-of select="$pathToCSV"/>-->
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
    <xsl:template name='header'>
    </xsl:template>
<!-- 
    <xsl:template match="/matrix">
    <table>
        <xsl:for-each select="row">
            <tr>
                <xsl:call-template name="tokenize">
                    <xsl:with-param name="text" select="substring(., 2, string-length(.) - 2)"/>
                </xsl:call-template>
            </tr>
        </xsl:for-each>
    </table>
    </xsl:template>    
-->
    <xsl:template name="tokenize">
    <xsl:param name="text"/>
    <xsl:param name="delimiter" select="'&#x9;'"/>
        <xsl:variable name="token" select="substring-before(concat($text, $delimiter), $delimiter)" />
        <xsl:if test="$token">
            <td>
                <xsl:value-of select="$token"/>
            </td>
        </xsl:if>
        <xsl:if test="contains($text, $delimiter)">
            <!-- recursive call -->
            <xsl:call-template name="tokenize">
                <xsl:with-param name="text" select="substring-after($text, $delimiter)"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>
    <xsl:template match="table">
        <!-- read_xml -->
        <!-- &#x9; -->
            <!-- get first line -->
        <!-- substring-before delimiter -->
        <!-- for loop td element -->
        <tr class='header'/>
    </xsl:template>

    <!-- LIST FIGURES -->
    <xsl:template match="figure">
        <li>
                    <div id="images">
                     <a style='text-decoration: none;'>
                        <img src="{@file}" style='width: 100px; height: 100px'/>
                        <div style='width: 90px; text-align: center;'>
                            <xsl:value-of select="@description"/>                            
    <!--                            <xsl:apply-templates/>-->
                        </div>
                     </a>
                    </div>
         </li>
    </xsl:template>

    <!-- LIST METHODS -->
    <xsl:template match="method">
            <li>
                <xsl:apply-templates select="@id"/>
                <xsl:for-each select="document('config.xml')/cfg/analysis/method[@id=current()/@id]/citation">
                    <sup>
                        <a href="#cite{count(preceding::citation) +1}">
                            <xsl:value-of select="count(preceding::citation) + 1"/>
                        </a>
                    </sup>
                </xsl:for-each>       
            </li>
    </xsl:template>

    <!--TOC based on analysis -->
    <xsl:template match="analysis" mode="toc">
        <li>
            <a href="#{@id}">
            <xsl:apply-templates select="@id"/>
            </a>
        </li>
    </xsl:template>
    
    <!--Citations    -->
	<xsl:template match="//method" mode="cite">
            <xsl:for-each select="document('config.xml')/cfg/analysis/method[@id=current()/@id]/citation">
                <li>
					<cite id="cite{count(preceding::citation) + 1}">
					[<xsl:value-of select="count(preceding::citation) + 1"/>]
					<xsl:apply-templates/>
                </cite>
                </li>
            </xsl:for-each>
    </xsl:template>
    <!-- figure images -->
    <!--<xsl:template match="figure">
        <li>
            <xsl:apply-templates select="@file"/>
            <!-\-citation-\->
            <!-\-                <xsl:if test="document('contentconfig.xml')/cfg/analysis/method[@id=current()/@id]/citation">
                    <sup>
                        <a href="#cite{count(preceding::method) + 1}">
                            <xsl:value-of select="count(preceding::method) + 1"/>
                        </a>
                        </sup>
					</xsl:if>       -\->
            <!-\-<xsl:for-each select="document('config.xml')/cfg/analysis/method[@id=current()/@id]/citation">
                <sup>
                    <a href="#cite{count(preceding::citation) +1}">
                        <xsl:value-of select="count(preceding::citation) + 1"/>
                    </a>
                </sup>
            </xsl:for-each>-\->       
        </li>
    </xsl:template>
    -->
    <!--<xsl:template match="//figure">
        <img src="{@file}">
            <xsl:apply-templates select="@file"/>
        </img>
     <!-\-   <xsl:element name="imgs">
<!-\\-        <img>    -\\->
            <xsl:attribute name="src">
<!-\\-                <xsl:value-of select="figure/@file"/>-\\->
                hi
<!-\\-                <xsl:apply-templates select="@file"></xsl:apply-templates>-\\->
            </xsl:attribute>
        </xsl:element>
<!-\\-        </img>-\\->-\->
    </xsl:template>-->   
</xsl:stylesheet>
